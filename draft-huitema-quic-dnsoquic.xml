<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [

<!ENTITY rfc1034 PUBLIC ''
   'http://xml.resource.org/public/rfc/bibxml/reference.RFC.1034.xml'>

<!ENTITY rfc1035 PUBLIC ''
   'http://xml.resource.org/public/rfc/bibxml/reference.RFC.1035.xml'>

<!ENTITY rfc1996 PUBLIC ''
   'http://xml.resource.org/public/rfc/bibxml/reference.RFC.1996.xml'>

<!ENTITY rfc2119 PUBLIC ''
   'http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml'>

<!ENTITY rfc4033 PUBLIC ''
   'http://xml.resource.org/public/rfc/bibxml/reference.RFC.4033.xml'>

<!ENTITY rfc5936 PUBLIC ''
   'http://xml.resource.org/public/rfc/bibxml/reference.RFC.5936.xml'>

<!ENTITY rfc6698 PUBLIC ''
   'http://xml.resource.org/public/rfc/bibxml/reference.RFC.6698.xml'>

<!ENTITY rfc7626 PUBLIC ''  
   "http://xml.resource.org/public/rfc/bibxml/reference.RFC.7626.xml"> 

<!ENTITY rfc7766 PUBLIC ''  
   "http://xml.resource.org/public/rfc/bibxml/reference.RFC.7766.xml"> 

<!ENTITY rfc7828 PUBLIC ''  
   "http://xml.resource.org/public/rfc/bibxml/reference.RFC.7828.xml"> 
 
<!ENTITY rfc7858 PUBLIC ''  
   "http://xml.resource.org/public/rfc/bibxml/reference.RFC.7858.xml"> 

<!ENTITY I-D.ietf-quic-transport PUBLIC ''  
   "http://xml2rfc.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-quic-transport.xml"> 

<!ENTITY I-D.ietf-quic-tls PUBLIC ''  
   "http://xml2rfc.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-quic-tls.xml"> 

<!ENTITY I-D.ietf-quic-http PUBLIC ''  
   "http://xml2rfc.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-quic-http.xml"> 

<!ENTITY I-D.ietf-dprive-dtls-and-tls-profiles PUBLIC ''  
   "http://xml2rfc.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dprive-dtls-and-tls-profiles.xml">

]>

<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<?rfc compact="yes"?>
<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>

<!-- Expand crefs and put them inline -->
<?rfc comments='yes' ?>
<?rfc inline='yes' ?>

<rfc category="std" 
     docName="draft-huitema-quic-dnsoquic-00.txt" 
     ipr="trust200902">

<front>
    <title abbrev="DNS over QUIC">
      Specification of DNS over QUIC
    </title>

   <author fullname="Christian Huitema" initials="C." surname="Huitema">
      <organization>Private Octopus Inc.</organization>
      <address>
        <postal>
          <street> </street>
          <city>Friday Harbor</city>
          <code>98250</code>
          <region>WA</region>
          <country>U.S.A.</country>
        </postal>
        <email>huitema@huitema.net</email>
      </address>
    </author>
   <author fullname="Melinda Shore" initials="M." surname="Shore">
      <organization>No Mountain Software</organization>
      <address>
        <postal>
          <street> </street>
          <city></city>
          <country></country>
        </postal>
        <email>melinda.shore@nomountain.net</email>
      </address>
    </author>
   <author fullname="Allison Mankin" initials="A." surname="Mankin">
      <organization>Salesforce</organization>
      <address>
        <postal>
          <street> </street>
          <city></city>
          <country></country>
        </postal>
        <email>amankin@salesforce.com</email>
      </address>
    </author>
   <author fullname="Sara Dickinson" initials="S." surname="Dickinson">
      <organization>Sinodun IT</organization>
      <address>
        <postal>
          <street>Magdalen Centre, Oxford Science Park </street>
          <city>Oxford</city>
          <country>U.K.</country>
        </postal>
        <email>sara@sinodun.com</email>
      </address>
    </author>
    <date year="2017" />

    <abstract>
        <t> 
   This document describes the use of QUIC to
   provide transport privacy for DNS.  The encryption provided by QUIC
   has similar properties to that provided by TLS, while QUIC transport
   eliminates the end-of-queue blocking issues inherent
   with TCP and provides more efficient error corrections than
   UDP. DNS over QUIC has privacy properties similar to DNS over TLS
   specified in RFC 7858, and performance similar to classic
   DNS over UDP.
        </t>
    </abstract>
</front>

<middle>
<section title="Introduction">
<t>
Domain Name System (DNS) concepts are specified in <xref target="RFC1034" /> and implementation 
in <xref target="RFC1035" />.
QUIC transport is specified in <xref target="I-D.ietf-quic-transport" />.
QUIC connection setup includes the negotiation of security parameters using TLS, as specified in
<xref target="I-D.ietf-quic-tls" />.
</t>
<t>
DNS privacy considerations are described in <xref target="RFC7626"/>.  
<xref target="RFC7858" /> defines how to mitigate these issues by transmitting DNS messages over TLS and TCP.
Transmitting DNS messages over QUIC will provide the same privacy protections as 
<xref target="RFC7858" />, with the added benefit that QUIC provides faster connection set up than TLS over TCP, and also
 traffic sent over QUIC will not experience the "head of queue blocking" issues inherent to TCP.
</t>
<t>
Specifying the transmission of an application over QUIC requires to specify how the application messages are
mapped to QUIC streams, and generally how the application will use QUIC. This is done for HTTP in 
<xref target="I-D.ietf-quic-http" />. The 
purpose of this document is to define the way DNS can be transmitted over QUIC.
</t>

<section title="Requirements">
<t>
  The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
  "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
  document are to be interpreted as described in <xref target="RFC2119" />.
</t>
</section>

</section> <!-- end of introduction -->

<section title="Design Considerations" >
<t>
TODO: some nice paragraph to start the design section
</t>
<section title="When to use DNS over QUIC" >
<t>
Stub to recursive resolver scenario: configured resolver, much like DNS over TLS.
</t>
<t>
Stub to local resolver (DHCP, etc): do we care.
</t>
<t>
Resolver to authoritative: how does the resolver know that the authoritative can use QUIC? 
Try and cache? Define an EDNS option? Some kind of service record? Does it belong in this draft?
</t>
</section>
<section title="Queries and streams" >
<t>
   A QUIC stream provides reliable in-order delivery of bytes, but makes
   no guarantees about order of delivery with regard to bytes on other
   streams.  On the wire, data is framed into QUIC STREAM frames, but
   this framing is invisible to the HTTP framing layer.  A QUIC receiver
   buffers and orders received STREAM frames, exposing the data
   contained within as a reliable byte stream to the application.
</t>
<t>
   Streams are identified by a stream ID. Clients can initiate streams with
   odd numbers, servers can initiate streams with even numbers. Both 
   parties can send data on streams initiated by the other party, such
   as for example the client initiating a stream and sending a query
   on that stream, and the server sending a response through the same
   stream.
</t>
<t>
   The simplest way to map DNS over QUIC would be to use exactly one stream,
   probably stream 3. This stream would carry a series of messages, delimited
   by a length field, much like DNS over TLS or DNS over TCP. The obvious
   drawback is that QUIC's mitigation of "head of queue blocking" only
   applies to data sent on multiple stream. Transmission
   on the stream affected by the transmission error is blocked, but
   transmission on the other streams can continue. If all data is sent on
   a single stream, then processing on that stream's data will be suspended
   until the error is corrected.
</t>
<t>
   Another plausible mapping would be to have the client send each query on 
   its own stream, and expect the answer to arrive on the same stream. This
   design will take full advantage of QUIC's features. If a packet is loss,
   the corresponding request or answer would have to be retransmitted, but
   other queries would proceed in parallel. This will be very similar to
   what happens with DNS over UDP, but without having the restriction on
   message length inherent to UDP.
</t>
<t>
   The mappings of HTTP over QUIC (<xref target="I-D.ietf-quic-http" />
   use a different design, intermediate between
   the "single stream for all messages" and "one stream per transaction" designs
   described above. In the HTTP over QUIC mappings, the client sends all the
   request headers over stream 3, together with a pointer to the stream that
   will carry the request bodies from the client, and the responses from
   the server. This allows the server to just wait on that
   stream, and learn here about arrivals of queries from the client. The
   advantage is that the server can then schedule processing of the request
   and response according to various policies and priorities, and can also
   control more tightly the usage of streams. There are two downsides. Using
   a stream for request headers requires mechanisms to manage the relation between
   header and body streams, which increases the complexity of the protocol.
   Also, the header stream is exposed to head of queue blocking, which
   somewhat reduces the performance of the protocol. 
</t>
<t>
   DNS is a much simpler application than HTTP, and the additional complexity
   of a separate stream for requests or headers does not appear justified. This
   specification will adopt the "one stream per transaction" design. This
   design assumes that the QUIC API provides a way for clients and servers to
   be notified when a new stream is initiated by the peer.
</t>
</section>
<section title="Queries with multiple responses" >
<t>
Many DNS transactions consist of simple exchanges, in which the DNS client sends 
a Query, and the DNS server replies with a Response, but there are different
usage models. We cannot enumerate all possible usages of the DNS protocol, but the
following examples are sufficient to document their diverse nature. In the  
zone transfer scenario (<xref target="RFC5936" />), the client emits a single 
AXFR query, and the server responds with a series of AXFR responses. In
the Push service currently
elaborated in the DNSSD working group,
the client emits a single SUBSCRIBE query, and the server responds with a series
of PUSH messages. In the notification scenario (<xref target="RFC1996" /> the
server sends a series of NOTIFY messages.
</t>
<t>
All these scenarios have to be supported by the specification of DNS over QUIC. 
This convinces us that a rigid mapping of DNS "query/response" structure to the
QUIC stream would not be adequate. For example, there are scenarios that require
an ordered delivery of responses, and the only way to guarantee that with QUIC
is to send a succession of responses on the same stream. On the other hand, there
are scenarios in which queries and responses can be processed in parallel, 
without any particular ordering requirements. In such cases, using multiple
streams will result in improved performance.
</t>
<t>
The simplest way to achieve all these requirements is to consider QUIC streams 
as light weight TCP connections. If a query is sent on a specific stream,
responses should be sent through the same stream, much like they would be sent 
through the same TCP connection. If a client is concerned with performance,
it will open multiple streams to enable parallel processing and mitigate
end of queue blocking.
</t> 
</section>
<section title="Connection duration and tradeoffs" >
<t>
The establishment and maintenance of QUIC connections requires allocation of
resource on the server. This is very similar to the allocation of resource
for maintaining TLS connections discussed in section 3.4 of <xref target="RFC7858" />,
or to the handling of TCP connections discussed in section 6 of
<xref target="RFC7766" />, which notes the downside of opening too many connections.
</t>
<t>
The tradeoffs need to be informed with two specificities of QUIC, the 
use of multiple streams, 
and the possibility of sending zero RTT data during session resume.
</t>
</section>
<section title="Use of Zero RTT data" >
<t>
QUIC enables transmission of "Zero RTT" data. TLS 1.3 also does, and in fact QUIC's security
negotiation reuses TLS 1.3. The issue of using 0-RTT data with TLS 1.3 was analyzed by
Daniel Kahn Gillmor (DKG) in a message to the IETF "DPRIV" working group <xref target="DNS0RTT" />.
In this message, DKG lists two concerns:
</t>
<t>
<list style="numbers">
<t>
The zero-RTT data can be replayed by adversaries. That data may triggers a request by a
recursive resolver to an authoritative resolvers. Adversaries may be able to pick a time 
at which the recursive resolver queries are observable, and thus find out what name was
queried for in the 0-RTT data.
</t>
<t>
The zero-RTT mechanism relies on TLS resume. Clients and servers can cooperate to avoid
linkability by third parties, but the server will always be able to link the resumed session 
to the initial session. This creates a virtual long duration session. The series of requests
in that section can be used by the server to identify the client.
</t>
</list>
</t>
<t>
Clients will have to balance the risks associated to these two attacks versus the performance
gains resulting from 0-RTT.
</t>
</section>

<section title="Authentication" >
<t>
We envisage using DNS over QUIC in two main scenarios, client to to recursive resolver
and recursive resolver to authoritative resolver. 
In the client to recursive resolver scenario,
the authentication requirements are the same as described in <xref target="RFC7858" /> and <xref target="I-D.ietf-dprive-dtls-and-tls-profiles" />. 
There is no need to authenticate the client's identity in either scenario.
</t>
<t>
In the recursive resolver to authoritative server scenario, the server's identity can be 
verified using the usual TLS mechanisms, using either X.509 certifcate or the
DANE mechanisms <xref target="RFC6698"/>. The server's authority to provide 
answers for the client's queries can be verified using DNS Security Extensions (DNSSEC) 
<xref target="RFC4033" />, and there is not much point to replicate that mechanism using QUIC
security negotiation. 
</t>
</section>

<section title="Robustness and Denial of Service" >
</section>

</section> <!-- end of design -->

<section title="Specifications" >
<t>
TBD
</t>

<section anchor="connection-establishment" title="Connection Establishment">

<t>DNS/QUIC connections are established as described in 
<xref target="I-D.ietf-quic-transport"/>. During
connection establishment, DNS/QUIC support is indicated by selecting the ALPN
token "dq" in the crypto handshake.</t>

<section title="Draft Version Identification" >

<t><list style='empty'>
  <t><spanx style="strong">RFC Editor's Note:</spanx>  Please remove this section prior to publication of a
final version of this document.</t>
</list></t>

<t>Only implementations of the final, published RFC can identify themselves as
"dq". Until such an RFC exists, implementations MUST NOT identify themselves
using this string.</t>

<t>Implementations of draft versions of the protocol MUST add the string "-" and
the corresponding draft number to the identifier. For example,
draft-huitema-quic-dnsoquic-00 is identified using the string "hq-h00".</t>
</section>

<section anchor="port-selection" title="Port Selection">
        <t>
          By default, a DNS server that supports DNS/QUIC MUST listen for
          and accept QUIC connections on UDP port 853, unless it has mutual agreement
          with its clients to use a port other than
          853 for DNS over QUIC.
          In order to use a port other than 853, both clients and servers
          would need a configuration option in their software.
        </t>
        <t>
          By default, a DNS client desiring to use DNS over QUIC with a
          particular server MUST establish a QUIC connection to UDP
          port 853 on the server, unless it has mutual agreement with its server
          to use a port other than port 853 for DNS over QUIC.
          Such another port MUST NOT be port 53.
          This recommendation against use of port 53 for DNS over QUIC
	  is to avoid confusion between DNS over QUIC and DNS over UDP
          as specified in <xref target="RFC1035" />.      
        </t>
      </section>

<section anchor="fall-back" title="Fall Back procedures">
<t>
If the establishment of the DNS over QUIC session fails, clients
SHOULD attempt to fall back to DNS over TLS, as specified in
<xref target="RFC7858" />.
</t>

        <t>
          DNS clients SHOULD remember server IP addresses that don't
          support DNS over QUIC, including timeouts, connection
          refusals, and QUIC handshake failures, and not request
          DNS over QUIC from them for a reasonable period (such as
          one hour per server).  DNS clients following an out-of-band key-pinned
          privacy profile (<xref target="RFC7858"/>) MAY be more aggressive about retrying
          DNS-over-QUIC connection failures.
        </t>
</section>
     
</section> <!-- end of Connections -->

<section title="Stream Mapping and Usage" >
<t>
The mapping of
DNS traffic over QUIC streams takes advantage of the QUIC stream features
detailed in section 10 of <xref target="I-D.ietf-quic-transport" />.
</t>
<t>
The majority of DNS traffic follows a simple pattern in which the
client emits a query, and the server provides a response. 
In this case the
client MUST select the next available client stream, in conformance
with section 10.2 of <xref target="I-D.ietf-quic-transport" />.
</t>
<t>
The client MUST send the DNS query over the selected stream, 
and MUST indicate through the STREAM FIN mechanism that no further data will
be sent on that stream.
</t>
<t>
The server MUST send the response on the same stream, and MUST indicate through the 
STREAM FIN mechanism mechanism that no further data will
be sent on that stream. 
</t> 
<t>
DNS query and responses are formatted as specified in <xref target="RFC1035" />, with
a two bytes length field prepended.
</t>
<section title="Multiple Responses" >
<t>
In some DNS transactions such as AXFR, a single query generates a series of responses. In that
case, the server MUST send all responses on the stream selected by the client for 
the query. The server MUST indicate the termination of the stream after
all queries have been sent.
</t>
</section>

<section title="Server initiated transactions" >
<t>
There are traffic patterns in which a server sends unsolicited queries to a client,
such as for example NOTIFY messages. When a server wishes to send such queries
it MUST select the next available server stream, in conformance
with section 10.2 of <xref target="I-D.ietf-quic-transport" />. It will then send 
the DNS query over the selected stream, 
and MUST indicate through the STREAM FIN mechanism that no further data will
be sent on that stream.
</t>
<t>
The client MUST send the response on the same stream, and MUST indicate through the 
STREAM FIN mechanism mechanism that no further data will
be sent on that stream. 
</t> 
</section>

<section title="Stream Reset" >
<t>
Stream transmission may be abandoned by either party, using the stream "reset" facility. 
A stream reset indicates that one party is unwilling to continue processing
the transaction associated with the stream. The corresponding query MUST be abandoned.
</t>
<t>
TODO: should there be timers? What if a client sends a query and the server never sends
a response?
</t>
</section>

</section> <!-- end of Stream mapping -->

<section anchor="Connection-Close" title="Connection Reuse, Close, and Reestablishment">
<t>
TODO: the text here is a mix of specifications and usage guidelines. Would benefit from
some cleanup.
</t>
        <t>
          For DNS clients that use library functions such as "getaddrinfo()" and "gethostbyname()",
          current implementations are known to open and close TCP connections for each DNS
          query.  To avoid excess QUIC connections, each with a single query,
          clients SHOULD reuse a single QUIC connection to the
          recursive resolver.  Alternatively, they may prefer to use UDP
          to a DNS-over-QUIC-enabled caching resolver on the same machine
          that then uses a system-wide QUIC connection to the recursive
          resolver.
        </t>
        <t>
          In order to amortize QUIC and TLS connection setup costs, clients
          and servers SHOULD NOT immediately close a connection after
          each response.  Instead, clients and servers SHOULD reuse
          existing connections for subsequent queries as long as they
          have sufficient resources.  In some cases, this means that
          clients and servers may need to keep idle connections open for
          some amount of time.
        </t>
        <t>
          Proper management of established and idle connections is important
          to the healthy operation of a DNS server.  An implementor of
          DNS over QUIC SHOULD follow best practices for DNS over TCP, as
          described in <xref target="RFC7766"/>.  Failure
          to do so may lead to resource exhaustion and denial of service.
        </t>
        <t>
          This document does not make specific recommendations for timeout
          values on idle connections.  Clients and servers should reuse
          and/or close connections depending on the level of available
          resources.  Timeouts may be longer during periods of low activity
          and shorter during periods of high activity.  Current work in
          this area may also assist DNS-over-TLS clients and servers
          in selecting useful timeout values <xref
                target="RFC7828"/> <xref target="TDNS"/>.
        </t>
        <t>
          Clients and servers that keep idle connections open MUST be
          robust to termination of idle connection by either party.  As
          with current DNS over TCP, DNS servers MAY close the connection
          at any time (perhaps due to resource constraints).  As with current
          DNS over TCP, clients MUST handle abrupt closes and be prepared
          to reestablish connections and/or retry queries.
        </t>
        <t>
          When reestablishing a DNS-over-QUIC connection that was terminated,
          clients and servers SHOULD take advantage of the QUIC "resume"
          mechanisms.
          
        </t>
        <t>
          When closing a connection, DNS servers SHOULD use the QUIC
          GOAWAY mechanisms.
        </t>
      </section>


</section> <!-- end of Specifications -->


<section title="Security Considerations">
<t>
TBD 
</t>
</section>

<section title="Privacy Considerations">
<t>
TBD 
</t>
</section>

<section title="IANA Considerations" anchor="iana">
<t> 
TBD
</t> 
</section>

<section title="Acknowledgments">
<t>
This document liberally borrows text from <xref target="I-D.ietf-quic-http" /> authored by
Mike Bishop, and from <xref target="RFC7858" /> authored by Zi Hu, Liang Zhu, John Heidemann,
Allison Mankin, Duane Wessels, and Paul Hoffman.
</t>
    <t>
Thanks to our wide cast of supporters.
    </t>
</section>
</middle>

<back>

<references title="Normative References">
       &rfc1034;
       &rfc1035;
       &rfc2119;
       &I-D.ietf-quic-transport;
       &I-D.ietf-quic-tls;
       &I-D.ietf-dprive-dtls-and-tls-profiles;
</references>

<references title="Informative References">
      &rfc4033;
      &rfc5936;
      &rfc6698;
      &rfc7626;
      &rfc7828;
      &rfc7766;
      &rfc7858;
      &I-D.ietf-quic-http;
      &rfc1996;

<reference anchor="DNS0RTT" target="https://www.ietf.org/mail-archive/web/dns-privacy/current/msg01276.html">
  <front>
    <title>DNS + 0-RTT</title>
    <author initials="D." surname="Kahn Gillmor" fullname="Daniel Kahn Gillmor">
      <organization/>
    </author>
    <date year="2016" month="April" day="06" />
  </front>
  <seriesInfo name="Message" value="DNS-Privacy WG mailing list"/>
</reference>

<reference anchor="TDNS" target="http://dx.doi.org/10.1109/SP.2015.18">
        <front>
          <title>Connection-Oriented DNS to Improve Privacy and Security</title>
          <author initials="L." surname="Zhu" fullname="Liang Zhu"/>
          <author initials="Z." surname="Hu" fullname="Zi Hu"/>
          <author initials="J." surname="Heidemann" fullname="John Heidemann"/>
          <author initials="D." surname="Wessels" fullname="Duane Wessels"/>
          <author initials="A." surname="Mankin" fullname="Allison Mankin"/>
          <author initials="N." surname="Somaiya" fullname="Nikita Somaiya"/>
          <date/>
        </front>
        <seriesInfo name="2015 IEEE Symposium" value="on Security and Privacy (SP)" />
   <seriesInfo name="DOI" value="10.1109/SP.2015.18" />
      </reference>


</references>  

</back>
</rfc>
